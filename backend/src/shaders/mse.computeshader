#version 430 core
layout(local_size_x = 1024, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img1;
layout (binding = 1, std430) buffer OutputBlock { int[] Result; };


void main() {


  // get index in global work group i.e x,y position
  int x = int(gl_WorkGroupID.x * (1024 * 2) +
          gl_LocalInvocationID.x);

  ivec2 size = ivec2(imageSize(img1));
  int total_size = size.x * size.y;

  ivec2 pixel_coords1 = ivec2(x / size.x, x % size.y);
  ivec2 pixel_coords2 = ivec2((x + 1024) / size.x, (x + 1024) % size.y);

  vec4 color1 = imageLoad(img1, pixel_coords1);
  vec4 color2 = imageLoad(img1, pixel_coords2);

  int sum1 = int(color1.r * 255.0) + int(color1.g * 255.0) + int(color1.b * 255.0);
  int sum2 = int(color2.r * 255.0) + int(color2.g * 255.0) + int(color2.b * 255.0);

  int tid = int(gl_LocalInvocationIndex.x);

  Result[x] = sum1 + sum2;

  barrier();

  for (int s=1024 / 2; s > 0; s >>= 1) {
    int limit = x + s;

    if (tid < s) {
      Result[x] += Result[limit];
    }

    barrier();
  }

  if (tid == 0 && x != 0) {
    atomicAdd(Result[0], Result[x]);
  }
}